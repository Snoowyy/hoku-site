/* MIXINS */
// MEDIAQUERIES
@mixin mq($media) {
  @if type-of($media) ==number {
    @if unitless($media) {
      @media only screen and (min-width: $media + px) {
        @content;
      }
    }
  } @else {
    @if type-of(map-get($mediaqueries, $media)) ==number {
      @media only screen and (min-width: map-get($mediaqueries, $media) + px) {
        @content;
      }
    } @else if type-of(map-get($mediaqueries, $media)) ==string {
      @media #{map-get($mediaqueries,$media)} {
        @content;
      }
    }
  }
}
@mixin Mq($media) {
  @if type-of($media) ==number {
    @if unitless($media) {
      @media only screen and (max-width: $media + px) {
        @content;
      }
    }
  } @else {
    @if type-of(map-get($mediaqueries, $media)) ==number {
      @media only screen and (max-width: map-get($mediaqueries, $media) + px) {
        @content;
      }
    } @else if type-of(map-get($mediaqueries, $media)) ==string {
      @media #{map-get($mediaqueries,$media)} {
        @content;
      }
    }
  }
}
// Flexbox
@mixin flex(
  $horizontal: center,
  $vertical: center,
  $wrap: wrap,
  $display: flex
) {
  display: $display;
  justify-content: $horizontal;
  align-items: $vertical;
  align-content: $vertical;
  flex-wrap: $wrap;
}

// PX to REM
@mixin fontSize($size) {
  font-size: calc($size / $baseFont) + rem;
}

// PX TO REM OPTION FUNCTION
@function toRem($size) {
  $newSize: calc($size / $baseFont) + rem;
  @return $newSize;
}

// Transitions
@mixin transition($property: all, $time: 0.3, $timing: ease) {
  transition: $property $time + s $timing;
}

// Call animation
@mixin animation($name, $time) {
  animation: $name linear $time;
  animation-iteration-count: infinite;
  transform-origin: 50% 50%;
}

// Placeholder styles
@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root("::-webkit-input-placeholder") {
    @content;
  }

  @include optional-at-root(":-moz-placeholder") {
    @content;
  }

  @include optional-at-root("::-moz-placeholder") {
    @content;
  }

  @include optional-at-root(":-ms-input-placeholder") {
    @content;
  }
}

//=== Drawing effect

@mixin btn-border-drawing(
  $color: #ccc,
  $hover: black,
  $width: 2px,
  $vertical: top,
  $horizontal: left,
  $duration: 0.25s
) {
  box-shadow: inset 0 0 0 $width $color;
  color: $color;
  transition: color $duration calc($duration / 3);
  position: relative;

  &::before,
  &::after {
    border: 0 solid transparent;
    box-sizing: border-box;
    content: "";
    pointer-events: none;
    position: absolute;
    width: 0;
    height: 0;

    #{$vertical}: 0;
    #{$horizontal}: 0;
  }

  &::before {
    $h-side: if($horizontal== "left", "right", "left");

    border-#{$vertical}-width: $width;
    border-#{$h-side}-width: $width;
  }

  &::after {
    $v-side: if($vertical== "top", "bottom", "top");

    border-#{$v-side}-width: $width;
    border-#{$horizontal}-width: $width;
  }

  &:hover {
    color: $hover;

    &::before,
    &::after {
      border-color: $hover;
      transition: border-color 0s, width $duration, height $duration;
      width: 100%;
      height: 100%;
    }

    &::before {
      transition-delay: 0s, 0s, $duration;
    }

    &::after {
      transition-delay: 0s, $duration, 0s;
    }
  }
}

.draw-border {
  @include btn-border-drawing(#58afd1, #ffe593, 4px, bottom, right);
}

// Clear float
@mixin clear-b() {
  &::after,
  &::before {
    content: "";
    display: table;
    clear: both;
    width: 100%;
  }
}

.clear-b {
  @include clear-b;
}

/* ITERATIONS */

// Margins and Paddings
@for $i from 0 through 20 {
  $value: $i * 10;

  // Margin
  .mt#{$value} {
    margin-top: #{$value}px !important;
  }

  .mb#{$value} {
    margin-bottom: #{$value}px !important;
  }

  .mr#{$value} {
    margin-right: #{$value}px !important;
  }

  .ml#{$value} {
    margin-left: #{$value}px !important;
  }

  // Padding
  .pt#{$value} {
    padding-top: #{$value}px !important;
  }

  .pb#{$value} {
    padding-bottom: #{$value}px !important;
  }

  .pr#{$value} {
    padding-right: #{$value}px !important;
  }

  .pl#{$value} {
    padding-left: #{$value}px !important;
  }
}

// Margins and Paddings on mobile
@for $i from 0 through 20 {
  $value: $i * 10;

  // Margins
  .mtm#{$value} {
    @include mq(mob) {
      margin-top: #{$value}px !important;
    }
  }

  .mbm#{$value} {
    @include mq(mob) {
      margin-bottom: #{$value}px !important;
    }
  }

  .mlm#{$value} {
    @include mq(mob) {
      margin-left: #{$value}px !important;
    }
  }

  .mrm#{$value} {
    @include mq(mob) {
      margin-right: #{$value}px !important;
    }
  }

  // Paddings
  .ptm#{$value} {
    @include mq(mob) {
      padding-top: #{$value}px !important;
    }
  }

  .pbm#{$value} {
    @include mq(mob) {
      padding-bottom: #{$value}px !important;
    }
  }

  .plm#{$value} {
    @include mq(mob) {
      padding-left: #{$value}px !important;
    }
  }

  .prm#{$value} {
    @include mq(mob) {
      padding-right: #{$value}px !important;
    }
  }
}

.mrA {
  margin-right: auto;
}
.mrU {
  margin-right: unset !important;
}
.mlA {
  margin-left: auto;
}
.mA {
  margin: auto;
}
